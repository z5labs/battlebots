// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v5.30.0--dev
// source: battle.proto

package battlepb

import (
	context "context"
	eventspb "github.com/z5labs/battlebots/pkgs/eventspb"
	movepb "github.com/z5labs/battlebots/pkgs/movepb"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	Battle2D_Events_FullMethodName = "/battlebots.protobuf.Battle2D/Events"
	Battle2D_Move_FullMethodName   = "/battlebots.protobuf.Battle2D/Move"
)

// Battle2DClient is the client API for Battle2D service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type Battle2DClient interface {
	Events(ctx context.Context, in *eventspb.Events2DRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[eventspb.Event2D], error)
	Move(ctx context.Context, in *movepb.Move2DRequest, opts ...grpc.CallOption) (*movepb.Move2DResponse, error)
}

type battle2DClient struct {
	cc grpc.ClientConnInterface
}

func NewBattle2DClient(cc grpc.ClientConnInterface) Battle2DClient {
	return &battle2DClient{cc}
}

func (c *battle2DClient) Events(ctx context.Context, in *eventspb.Events2DRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[eventspb.Event2D], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &Battle2D_ServiceDesc.Streams[0], Battle2D_Events_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[eventspb.Events2DRequest, eventspb.Event2D]{ClientStream: stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type Battle2D_EventsClient = grpc.ServerStreamingClient[eventspb.Event2D]

func (c *battle2DClient) Move(ctx context.Context, in *movepb.Move2DRequest, opts ...grpc.CallOption) (*movepb.Move2DResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(movepb.Move2DResponse)
	err := c.cc.Invoke(ctx, Battle2D_Move_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Battle2DServer is the server API for Battle2D service.
// All implementations must embed UnimplementedBattle2DServer
// for forward compatibility.
type Battle2DServer interface {
	Events(*eventspb.Events2DRequest, grpc.ServerStreamingServer[eventspb.Event2D]) error
	Move(context.Context, *movepb.Move2DRequest) (*movepb.Move2DResponse, error)
	mustEmbedUnimplementedBattle2DServer()
}

// UnimplementedBattle2DServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedBattle2DServer struct{}

func (UnimplementedBattle2DServer) Events(*eventspb.Events2DRequest, grpc.ServerStreamingServer[eventspb.Event2D]) error {
	return status.Errorf(codes.Unimplemented, "method Events not implemented")
}
func (UnimplementedBattle2DServer) Move(context.Context, *movepb.Move2DRequest) (*movepb.Move2DResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Move not implemented")
}
func (UnimplementedBattle2DServer) mustEmbedUnimplementedBattle2DServer() {}
func (UnimplementedBattle2DServer) testEmbeddedByValue()                  {}

// UnsafeBattle2DServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to Battle2DServer will
// result in compilation errors.
type UnsafeBattle2DServer interface {
	mustEmbedUnimplementedBattle2DServer()
}

func RegisterBattle2DServer(s grpc.ServiceRegistrar, srv Battle2DServer) {
	// If the following call pancis, it indicates UnimplementedBattle2DServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&Battle2D_ServiceDesc, srv)
}

func _Battle2D_Events_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(eventspb.Events2DRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(Battle2DServer).Events(m, &grpc.GenericServerStream[eventspb.Events2DRequest, eventspb.Event2D]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type Battle2D_EventsServer = grpc.ServerStreamingServer[eventspb.Event2D]

func _Battle2D_Move_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(movepb.Move2DRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(Battle2DServer).Move(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Battle2D_Move_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(Battle2DServer).Move(ctx, req.(*movepb.Move2DRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Battle2D_ServiceDesc is the grpc.ServiceDesc for Battle2D service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Battle2D_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "battlebots.protobuf.Battle2D",
	HandlerType: (*Battle2DServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Move",
			Handler:    _Battle2D_Move_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Events",
			Handler:       _Battle2D_Events_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "battle.proto",
}

const (
	Battle3D_Events_FullMethodName = "/battlebots.protobuf.Battle3D/Events"
	Battle3D_Move_FullMethodName   = "/battlebots.protobuf.Battle3D/Move"
)

// Battle3DClient is the client API for Battle3D service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type Battle3DClient interface {
	Events(ctx context.Context, in *eventspb.Events3DRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[eventspb.Event3D], error)
	Move(ctx context.Context, in *movepb.Move3DRequest, opts ...grpc.CallOption) (*movepb.Move3DResponse, error)
}

type battle3DClient struct {
	cc grpc.ClientConnInterface
}

func NewBattle3DClient(cc grpc.ClientConnInterface) Battle3DClient {
	return &battle3DClient{cc}
}

func (c *battle3DClient) Events(ctx context.Context, in *eventspb.Events3DRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[eventspb.Event3D], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &Battle3D_ServiceDesc.Streams[0], Battle3D_Events_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[eventspb.Events3DRequest, eventspb.Event3D]{ClientStream: stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type Battle3D_EventsClient = grpc.ServerStreamingClient[eventspb.Event3D]

func (c *battle3DClient) Move(ctx context.Context, in *movepb.Move3DRequest, opts ...grpc.CallOption) (*movepb.Move3DResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(movepb.Move3DResponse)
	err := c.cc.Invoke(ctx, Battle3D_Move_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Battle3DServer is the server API for Battle3D service.
// All implementations must embed UnimplementedBattle3DServer
// for forward compatibility.
type Battle3DServer interface {
	Events(*eventspb.Events3DRequest, grpc.ServerStreamingServer[eventspb.Event3D]) error
	Move(context.Context, *movepb.Move3DRequest) (*movepb.Move3DResponse, error)
	mustEmbedUnimplementedBattle3DServer()
}

// UnimplementedBattle3DServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedBattle3DServer struct{}

func (UnimplementedBattle3DServer) Events(*eventspb.Events3DRequest, grpc.ServerStreamingServer[eventspb.Event3D]) error {
	return status.Errorf(codes.Unimplemented, "method Events not implemented")
}
func (UnimplementedBattle3DServer) Move(context.Context, *movepb.Move3DRequest) (*movepb.Move3DResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Move not implemented")
}
func (UnimplementedBattle3DServer) mustEmbedUnimplementedBattle3DServer() {}
func (UnimplementedBattle3DServer) testEmbeddedByValue()                  {}

// UnsafeBattle3DServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to Battle3DServer will
// result in compilation errors.
type UnsafeBattle3DServer interface {
	mustEmbedUnimplementedBattle3DServer()
}

func RegisterBattle3DServer(s grpc.ServiceRegistrar, srv Battle3DServer) {
	// If the following call pancis, it indicates UnimplementedBattle3DServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&Battle3D_ServiceDesc, srv)
}

func _Battle3D_Events_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(eventspb.Events3DRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(Battle3DServer).Events(m, &grpc.GenericServerStream[eventspb.Events3DRequest, eventspb.Event3D]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type Battle3D_EventsServer = grpc.ServerStreamingServer[eventspb.Event3D]

func _Battle3D_Move_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(movepb.Move3DRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(Battle3DServer).Move(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Battle3D_Move_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(Battle3DServer).Move(ctx, req.(*movepb.Move3DRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Battle3D_ServiceDesc is the grpc.ServiceDesc for Battle3D service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Battle3D_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "battlebots.protobuf.Battle3D",
	HandlerType: (*Battle3DServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Move",
			Handler:    _Battle3D_Move_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Events",
			Handler:       _Battle3D_Events_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "battle.proto",
}
