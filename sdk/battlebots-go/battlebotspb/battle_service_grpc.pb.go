// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v6.31.1
// source: battle_service.proto

package battlebotspb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	Battle_State_FullMethodName = "/battlebots.protobuf.Battle/State"
	Battle_Move_FullMethodName  = "/battlebots.protobuf.Battle/Move"
)

// BattleClient is the client API for Battle service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type BattleClient interface {
	State(ctx context.Context, in *StateChangeSubscription, opts ...grpc.CallOption) (grpc.ServerStreamingClient[StateChangeEvent], error)
	Move(ctx context.Context, in *MoveRequest, opts ...grpc.CallOption) (*MoveResponse, error)
}

type battleClient struct {
	cc grpc.ClientConnInterface
}

func NewBattleClient(cc grpc.ClientConnInterface) BattleClient {
	return &battleClient{cc}
}

func (c *battleClient) State(ctx context.Context, in *StateChangeSubscription, opts ...grpc.CallOption) (grpc.ServerStreamingClient[StateChangeEvent], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &Battle_ServiceDesc.Streams[0], Battle_State_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[StateChangeSubscription, StateChangeEvent]{ClientStream: stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type Battle_StateClient = grpc.ServerStreamingClient[StateChangeEvent]

func (c *battleClient) Move(ctx context.Context, in *MoveRequest, opts ...grpc.CallOption) (*MoveResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(MoveResponse)
	err := c.cc.Invoke(ctx, Battle_Move_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// BattleServer is the server API for Battle service.
// All implementations must embed UnimplementedBattleServer
// for forward compatibility.
type BattleServer interface {
	State(*StateChangeSubscription, grpc.ServerStreamingServer[StateChangeEvent]) error
	Move(context.Context, *MoveRequest) (*MoveResponse, error)
	mustEmbedUnimplementedBattleServer()
}

// UnimplementedBattleServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedBattleServer struct{}

func (UnimplementedBattleServer) State(*StateChangeSubscription, grpc.ServerStreamingServer[StateChangeEvent]) error {
	return status.Errorf(codes.Unimplemented, "method State not implemented")
}
func (UnimplementedBattleServer) Move(context.Context, *MoveRequest) (*MoveResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Move not implemented")
}
func (UnimplementedBattleServer) mustEmbedUnimplementedBattleServer() {}
func (UnimplementedBattleServer) testEmbeddedByValue()                {}

// UnsafeBattleServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to BattleServer will
// result in compilation errors.
type UnsafeBattleServer interface {
	mustEmbedUnimplementedBattleServer()
}

func RegisterBattleServer(s grpc.ServiceRegistrar, srv BattleServer) {
	// If the following call pancis, it indicates UnimplementedBattleServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&Battle_ServiceDesc, srv)
}

func _Battle_State_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(StateChangeSubscription)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(BattleServer).State(m, &grpc.GenericServerStream[StateChangeSubscription, StateChangeEvent]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type Battle_StateServer = grpc.ServerStreamingServer[StateChangeEvent]

func _Battle_Move_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MoveRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BattleServer).Move(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Battle_Move_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BattleServer).Move(ctx, req.(*MoveRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Battle_ServiceDesc is the grpc.ServiceDesc for Battle service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Battle_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "battlebots.protobuf.Battle",
	HandlerType: (*BattleServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Move",
			Handler:    _Battle_Move_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "State",
			Handler:       _Battle_State_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "battle_service.proto",
}
